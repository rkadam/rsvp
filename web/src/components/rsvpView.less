/**
 * Mixins for creating responsive views.
 *
 * Breakpoints
 * -------------------------------------------------------------------------
 * Breakpoints define the viewport widths at which layouts can change:
 *
 *   S:  480px <=  viewport width < 800px
 *   M:  800px <=  viewport width
 *
 *
 * Media queries
 * -------------------------------------------------------------------------
 * Each breakpoint has a variable containing the related media query:
 *
 *   S:  @minS
 *   M:  @minM
 *
 * These media query variables can be used directly within CSS media queries
 * when custom reponsive behavior is needed and the @* classes
 * are not appropriate.
 *
 * @example Padding is only applied for viewports equal to or larger than M
```less
	@media @minM {
		.something {
			padding-left: 15px;
		}
	}
	// Equivalent to:
	@media (min-width: 800px) {
		.something {
			padding-left: 15px;
		}
	}
```
 *
 *
 * Responsive modifiers
 * -------------------------------------------------------------------------
 * The .rsvpView--addBreakpointModifiers() mixin creates new modifiers for a
 * CSS class that are triggered for specific media query breakpoints. These
 * generated modifiers can be used to declaratively apply different behaviors
 * based on the current viewport size.
 *
 * The modifiers are generated by adding a suffix that specifies for which
 * viewports it should be used, in the form: @[S M L XL]
 *
 * See example usage here and in other components to see how the mixin can
 * be used to extend Less components.
 *
 * @example Adding responsive modifiers to the rsvpHidden component
```less
	.rsvpHidden {
		.rsvpView--addBreakpointModifiers({
			display: none !important;
		});
	}
```
```html
	<div class="rsvpHidden@M"> Hidden for medium or larger viewports </div>
```
 */

// Breakpoints
@rsvpView--S: 480px;
@rsvpView--M: 800px;

// Media queries
@minS: ~"(min-width: 480px)";
@maxS: ~"(max-width: 799px)";
@minM: ~"(min-width: 800px)";

.rsvpView--addBreakpointModifiers(@rules) {
	@rules();

	@media @minS {
		&\@S { @rules(); }
	}
	@media @minM {
		&\@M { @rules(); }
	}
}
